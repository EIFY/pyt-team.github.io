{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tutorial: Set-up, create, and train a two-step message passing network (Template)\n",
    "\n",
    "In this notebook, we will create and train a two-step message passing network in the simplicial complex domain. We will build a simple toy dataset from scratch using TopoNetX. We train the model to perform binary node classification. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import numpy as np\n",
    "from toponetx import SimplicialComplex\n",
    "from topomodelx.nn.simplicial.template_layer import TemplateLayer"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pre-processing\n",
    "\n",
    "## Create domain ##\n",
    "\n",
    "The first step is to define the topological domain on which the TNN will operate, as well as the neighborhod structures characterizing this domain. We will only define the neighborhood matrices that we plan on using.\n",
    "\n",
    "Here, we build a simple simplicial complex domain. Our domain is comprised of 5 nodes, which form two faces. We specify two edges in the domain, and TopoNetX adds edges along the faces to ensure the cell is regular."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "edge_set = [[1, 2], [1, 3]]\n",
    "face_set = [[2, 3, 4], [2, 4, 5]]\n",
    "\n",
    "domain = SimplicialComplex(edge_set + face_set)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create neighborhood structures. ##\n",
    "\n",
    "Now we retrieve the neighborhood structures (i.e. their representative matrices) that we will use to send messges on the domain. In this case, we need the boundary matrix (or incidence matrix) $B_2$. For a santiy check, we show that the shape of the $B_2 = n_\\text{edges} \\times n_\\text{faces}$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "incidence_2\n",
      " [[ 0.  0.]\n",
      " [ 0.  0.]\n",
      " [ 1.  0.]\n",
      " [-1.  1.]\n",
      " [ 0. -1.]\n",
      " [ 1.  0.]\n",
      " [ 0.  1.]]\n"
     ]
    }
   ],
   "source": [
    "incidence_2 = domain.incidence_matrix(rank=2)\n",
    "print(\"incidence_2\\n\", incidence_2.todense())"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We convert the neighborhood matrix to tensor format."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "incidence_2_torch = torch.from_numpy(incidence_2.todense()).to_sparse()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create data ##\n",
    "\n",
    "Since our task will be node classification, we must define an input signal (at least one datapoint) on the nodes. The signal will have shape $n_\\text{faces} \\times$ in_channels, where in_channels is the dimension of each cell's feature. Here, we take in_channels = channels_nodes $ = 2$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_2 = torch.tensor([[1.0, 1.0], [2.0, 2.0]])"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create the Neural Network\n",
    "\n",
    "Using the TemplateLayer class, we create a neural network with stacked layers. We define the amount of channels on the face and edge ranks to be different, making this a heterogenous network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "channels_face = np.array(x_2.shape[1])\n",
    "channels_edge = 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "class TemplateNN(torch.nn.Module):\n",
    "    def __init__(self, channels_face, channels_edge, n_layers=2):\n",
    "        super().__init__()\n",
    "        layers = []\n",
    "        for _ in range(n_layers):\n",
    "            layers.append(\n",
    "                TemplateLayer(\n",
    "                    in_channels=channels_face,\n",
    "                    intermediate_channels=channels_edge,\n",
    "                    out_channels=channels_face,\n",
    "                )\n",
    "            )\n",
    "        self.layers = layers\n",
    "        self.linear = torch.nn.Linear(channels_face, 1)\n",
    "\n",
    "    def forward(self, x_2, incidence_2_torch):\n",
    "        for layer in self.layers:\n",
    "            x_2 = layer(x_2, incidence_2_torch)\n",
    "        return self.linear(x_2)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Train the Neural Network\n",
    "\n",
    "We specify the model, assign ground truth labels for the classification task, and specify an optimizer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = TemplateNN(channels_face, channels_edge, n_layers=2)\n",
    "faces_gt_labels = torch.Tensor([[0], [1]])  # (n_faces, 1)\n",
    "optimizer = torch.optim.Adam(model.parameters(), lr=0.01)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following cell performs the training, looping over the network for 5 epochs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "for epoch in range(5):\n",
    "    optimizer.zero_grad()\n",
    "    faces_pred_labels = model(x_2, incidence_2_torch)\n",
    "    loss = torch.nn.functional.binary_cross_entropy_with_logits(\n",
    "        faces_pred_labels, faces_gt_labels\n",
    "    )\n",
    "    loss.backward()\n",
    "    optimizer.step()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "tmx",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
